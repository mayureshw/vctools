:-import load/2, store/3 from fileio.
:-import dep2cep/3 from dep2cep.

:-dynamic scep/4, sdep/2, eventmap/2.

:-index(dpe/3,[2]).
:-op(500,xfx,^).
:-op(700,xfx,->).
:-op(400,fx,*).

%%% Rewrite scep rules to convert high level interval types to basic ones,
%%% before numerizing.
rwscep(IR,CR,TAR,FAR) :- scep(I,C,TA,FA), rewritescep((I,C,TA,FA),(IR,CR,TAR,FAR)).

rewritescep( (watch,C,TA,FA), (iev(E),C,TA,FA) ) :- !, statevar(C,V), uackevent(V,E).
rewritescep( (I,C,TA,FA), (I,C,TA,FA) ).

uackevent(V,de(V,ack0)) :- dpe(Vid,V,vcPhi), vctid(Vid,ack0,_), !.
uackevent(V,de(V,Etyp)) :- dpe(Vid,V,_), vctid(Vid,Etyp,_), (Etyp=ack1;Etyp=ftreq).

statevar(*(V),V) :- !.
statevar(E,V) :- E=..[F,A,B], exprbinop(F), !, ( statevar(A,V) ; statevar(B,V) ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

cep(I,C,[],[log(Msg)]) :- sdep(D,Msg), numerizeDep(D,DN), dep2cep(DN,I,C).
cep(IN,CN,TAN,FAN) :- rwscep(I,C,TA,FA), numerizeInterval(I,IN), numerizeExpr(C,CN), numerizeActions(TA,TAN), numerizeActions(FA,FAN).

numerizeExpr(#(E), #(EN)) :- !, numerizeEvent(E,EN).
numerizeExpr(*(E), EN) :- atom(E), !, numerizeExpr(*(E,0), EN).
numerizeExpr(*(Reg,Pos), *(Dpeid,Pos)) :- !, dpe(Dpeid, Reg, _).
numerizeExpr(E,EN) :- E=..[F,A,B], exprbinop(F), !, numerizeExpr(A,AN), numerizeExpr(B,BN), EN=..[F,AN,BN].
numerizeExpr(E,E) :- atomic(E), !.

exprbinop(==).

numerizeActions([],[]):-!.
numerizeActions([A|Rest],[AN|RestN]):- numerizeAction(A,AN), numerizeActions(Rest,RestN).

numerizeAction(log(Msg),log(Msg)) :- !.
numerizeAction(event(E),event(EN)) :- !, numerizeAbstractEvent(E,EN).

numerizeInterval(itill(E), itill(EN)) :- !, numerizeEvent(E,EN).
numerizeInterval(iself(E), iself(EN)) :- !, numerizeEvent(E,EN).
numerizeInterval(iev(E), iev(EN)) :- !, numerizeEvent(E,EN).
numerizeInterval(iab(E1,E2), iab(E1N,E2N)) :- !, numerizeEvent(E1,E1N), numerizeEvent(E2,E2N).

numerizeDep(A->B, AN->BN) :- !, numerizeDepLeg(A,AN), numerizeDepLeg(B,BN).

numerizeDepLeg(E,EN) :- E=..[F,A,B], depbinop(F), !, numerizeDepLeg(A,AN), numerizeDepLeg(B,BN), EN=..[F,AN,BN].
numerizeDepLeg(E,EN) :- numerizeEvent(E,EN).

depbinop(^):-!.

numerizeEvent( de(Ident,EventTyp), Tid ) :- !, eventTyp(EventTyp), dpe(Objid,Ident,_), vctid(Objid,EventTyp,Tid).
numerizeEvent( ce(EventName), EN ) :- !, numerizeAbstractEvent(EventName,EN).

eventTyp(req0).
eventTyp(req1).
eventTyp(ack0).
eventTyp(ack1).
eventTyp(ftreq).

numerizeAbstractEvent(E,EN) :- eventmap(E,EN), !.
numerizeAbstractEvent(E,EN) :- lastEventNo(NLast), EN is NLast + 1, asserta(eventmap(E,EN)).

lastEventNo(MaxN) :- eventmap(_,MaxN), !.
lastEventNo(MaxN) :- setof(N, negTid(N), [NegMax|_]), MaxN is NegMax * -1.
negTid(N) :- vctid(_,_,N1), N is N1 * -1.


props2cep(Vc) :- load(vcir,Vc), load(props,Vc),
    store(cep,Vc,cep(_,_,_,_)), store(eventmap,Vc,eventmap(_,_)).

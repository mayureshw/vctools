:-import
    unparse/1
    from unparsecpp.

:-import
    member/2,
    nth/3
    from lists.

:-import
    unparse/1
    from unparsecpp.

:-import
    map/3
    from utils.

% operators identified by vC class
vcid( 'Assign',  vcInterlockBuffer ).
vcid( 'Phi',     vcPhi             ).
vcid( 'Phi',     vcPhiPipelined    ).
vcid( 'Branch',  vcBranch          ).
vcid( 'Assign',  vcEquivalence     ).
vcid( 'Load',    vcLoad            ).
vcid( 'Store',   vcStore           ).
vcid( 'Inport',  vcInport          ).
vcid( 'Outport', vcOutport         ).
vcid( 'Call',    vcCall            ).
vcid( 'Select',  vcSelect          ).
vcid( 'Slice',   vcSlice           ).

% operators identified by vC operator
vcid( 'Plus',   '+'  ).
vcid( 'Minus',  '-'  ).
vcid( 'Mult',   '*'  ).
vcid( 'Lt',     '<'  ).
vcid( 'Gt',     '>'  ).
vcid( 'Ge',     '>=' ).
vcid( 'Ne',     '!=' ).
vcid( 'Eq',     '==' ).
vcid( 'And',    '&'  ).
vcid( 'Or',     '|'  ).
vcid( 'Not',    '~'  ).
vcid( 'Bitsel', '[]' ).
vcid( 'Concat', '&&' ).

subtyps( bool,  [ uint8_t ] ).
subtyps( uint,  [ uint8_t, uint16_t, uint32_t, uint64_t ] ).
subtyps( wuint, [ wuint ] ).
subtyps( float, [ float, double ] ).

nonFloatOrder([ uint8_t, uint16_t, uint32_t, uint64_t, wuint ]).

sign(O, [Num,Num,Num]    ) :- member( O, ['Plus','Minus','Mult'] ),    !, numeric(Num).
sign(O, [Bool,Num,Num]   ) :- member( O, ['Lt','Gt','Ge','Ne','Eq'] ), !, bool(Bool), numeric(Num).
sign(O, [Bool,Bool,Bool] ) :- member( O, ['And','Or'] ),               !, bool(Bool).
sign(O, [Any]            ) :- member( O, ['Inport','Outport'] ),       !, any(Any).
sign('Not',    [Bool,Bool]        ):-!, bool(Bool).
sign('Assign', [Any,Any]          ):-!, any(Any).
sign('Phi',    [Any,Any,Any]      ):-!, any(Any).
sign('Branch', [Bool]             ):-!, bool(Bool).
sign('Load',   [Any,UInt]         ):-!, any(Any), uint(UInt).
sign('Store',  [UInt,Any]         ):-!, uint(UInt), any(Any).
sign('Select', [Any,Bool,Any,Any] ):-!, any(Any), bool(Bool).
sign('Bitsel', [Bool,NF,UInt]     ):-!, bool(Bool), nofloat(NF), uint(UInt).
sign('Concat', [NF1,NF2,NF3]      ):-!, nofloat(NF1), nofloat(NF2), nofloat(NF3), nfge(NF1,NF2), nfge(NF1,NF3).
sign('Slice',  [NF1,NF2]          ):-!, nofloat(NF1), nofloat(NF2), nfge(NF2,NF1).
sign('Call',   []                 ):-!.

numeric(ST) :- ( T = uint; T = float ), subtyp(T, ST).
nofloat(ST) :- ( T = uint; T = wuint ), subtyp(T, ST).
uint(ST)    :- subtyp(uint, ST).
any(ST)     :- subtyp(_, ST).
bool(ST)    :- subtyp(bool, ST).

creator( O,       'createIOPort'  ):- member( O, [ 'Inport', 'Outport' ] ), !.
creator( 'Load',  'createLoad'    ):-!.
creator( 'Store', 'createStore'   ):-!.
creator( 'Call',  'createCall'    ):-!.
creator( 'Slice', 'createSlice'   ):-!.
creator( _,       'createGeneral' ).

%%%%%%%%%%

suf_(T, TSuf) :- str_cat(T, '__', TSuf).
suf_L(L, Lsuf) :- map(L, (A,B,suf_(A,B)), Lsuf).

:-table nfge/2.
nfge( NF1, NF2 ) :- nonFloatOrder(L), nth(N1, L, NF1), nth(N2, L, NF2), N1 >= N2.

:-table operator/1.
operator(O) :- vcid(O,_).

:-table subtyp/2.
subtyp(T, ST) :- subtyps(T, STs), member(ST, STs).

:-table ctyp/1.
ctyp(ST) :- subtyp(_,ST1), suf_(ST1, ST).

opfmapv( O, Sig, lambda([this], 'OPRET', [ 'DPEARG' ], [Stmt]) ) :-
    CTyp = typ(O, Sig, ''), creator(O, Fcr),
    Stmt = stmt(ret(call(Fcr,[CTyp],[dpe]))).

opfmapk( O, Sig, br( [ str(VCID), br(Sig_) ] ) ) :-
    vcid(O, VCID), sign(O, Sig), suf_L(Sig, Sig_).

opfmapkv( br( [ K, V ] ) ) :- opfmapk(O, Sig, K), opfmapv(O, Sig, V).

opfmap(br(L)) :- findall(V, opfmapkv(V), L).

% TODO: wuint defined temporarily
cpp(def('wuint','unsigned long')).
cpp(def('CTYPENUM',br(L))) :- findall(TSuf, ctyp(TSuf), L1), sort(L1, L).
cpp(def('OPRET',typ('Operator',[],'*'))).
cpp(def('DPEARG',tv(typ('vcDatapathElement',[],'*'), [dpe]))).
cpp(def('OPFMAP',Cpp)) :- opfmap(Cpp).

%%% Test drivers
:- cpp(CPP), unparse(CPP), fail.
%:- operator(O), sign(O, Sig), writeln((O,Sig)), fail.

# Instructions:
#
# - Use same basename for Aa file and its test driver. E.g. if your Aa file is
#   mytest.aa, its test driver should be mytest.cpp. It helps automate the
#   build. If build is successful, the vC file and an executable will be
#   generated with the same basename. E.g. mytest.vc and mytest.out
#   respectively.
#
# - On running the .out file, the default logs are produced on stdout, which
#   you may want to redirect. There are various additional logs produced
#   depending on the options you chose in $VCTOOLSDIR/vcsimconf.h. Please refer
#   to the same file for more details of the logging options and log filenames

# This will process all .aa files in the current directory. If you want to
# process only certain files, set this to names of the files. Alternatively
# when invoking make specify suitable target e.g. make test.out where you have
# test.aa and test.cpp
AASRCS		=	$(wildcard *.aa)

# # # # # Usually you won't need to change below this # # # # #

PREFIX		=	/usr/pkg
XSB_VERSION	=	5.0.0
XSBDIR		=	$(PREFIX)/xsb-$(XSB_VERSION)
XSB			=	$(XSBDIR)/bin/xsb

VCFILES		=	$(AASRCS:.aa=.vc)
TESTSRCS	=	$(AASRCS:.aa=.cpp)
TESTEXES	=	$(TESTSRCS:.cpp=.out)
CEPFILES	=	$(VCFILES:.vc=.cep)
VCIRFILES	=	$(VCFILES:.vc=.vcir)
PROPFILES	=	$(VCFILES:.vc=.props)
IPROPFILES	=	$(VCFILES:.vc=.iprops)
LDFLAGS		+=	-L$(PREFIX)/lib -lpthread -lvcsim -Wl,-rpath,$(PREFIX)/lib
CXXFLAGS	+=	-std=c++17 -I$(PREFIX)/include

%.out:	%.cpp %.vc
	$(CXX) $(CXXFLAGS) $< $(LDFLAGS) -o $@

%.vc:	%.aa
	Aa2VC -O $< | vcFormat > $@
	if [ ! -s $@ ]; then rm -f $@; false; fi

all:	$(TESTEXES) $(CEPFILES)

clean:
	rm -f $(TESTEXES) $(VCFILES) $(CEPFILES) $(VCIRFILES) $(PROPFILES) $(IPROPFILES)

.PRECIOUS:	$(VCFILES) $(VCIRFILES)

# .vC -> .vcir
# vcir file contains information exported from the vC IR by vcexport tool
# Application should define a target specific DAEMONS variable
# E.g.
# abc.vcir: DAEMONS=d e f
%.vcir:	%.vc
	vcexport.out prolog $< $(DAEMONS)

# .vcir -> .iprops
# iprops file contains AHIR's internal validations generated by depgen tool
%.iprops:	%.vcir
	$(XSB) -e "[depgen], depgen('$*'), halt."

# .iprops, .uprops -> .props
# .uprops are user supplied cep or dep properties
# .uprops files follow the same format as .iprops These are conctenated into
# .props file (a bit wasteful, but otherwise it requires either changing the
# functor names or writing multifile clause in each file - both these are not
# so convenient.)
.SECONDEXPANSION:
%.props:	%.iprops $$(wildcard $$*.uprops)
	cat $^ > $@

# .cep file contains CEP spec in numerized form that the cep tool reads at run
# time. .uprops file represents user supplied proeprties. Both .iprops and
# properties
# NOTE: At least a blank .uprops file should be present
%.cep:	%.props
	$(XSB) -e "[props2cep], props2cep('$*'), halt."

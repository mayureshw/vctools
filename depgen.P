:-import load/2, store/3 from fileio.

:-index(dpe/3,[1,3]).
:-op(500,xfx,^).
:-op(700,xfx,->).

sdep( de(N,req0) ^ de(N,req1) -> de(N,ack0), 'Phi req0^req1 -> ack0'    ) :- dpe(_,N,'vcPhiPipelined').

sdep( de(N,req0) -> de(N,ack0) ^ de(N,ack1), 'Branch req0 -> ack0^ack1' ) :- dpe(_,N,'vcBranch').

sdep( Dep, Msg ) :- splitop(SO), dpe(SO,N,_),
    (
      ( Dep = ( de(N,req0) -> de(N,ack0) ), Msg = 'SplitOp req0 -> ack0' );
      ( Dep = ( de(N,req0) -> de(N,ack1) ), Msg = 'SplitOp req0 -> ack1' );
      ( Dep = ( de(N,req1) -> de(N,ack1) ), Msg = 'SplitOp req1 -> ack1' )
    ).

sdep( Dep, Msg ) :- splitop(UID), dpdep(UID,_,DID), splitop(DID), dpe(UID,U,_), dpe(DID,D,_),
    (
      ( Dep = ( de(D,ack1) -> de(U,req0) ), Msg = 'Use-Def Def-ack1 -> Use-req0');
      ( Dep = ( de(D,req1) -> de(U,ack0) ), Msg = 'Use-Def Def-req1 -> Use-ack0')
    ).

splitop(O) :- dpe(O,_,'vcBinarySplitOperator').

depgen(Vc):- load(vcir,Vc), store(iprops,Vc,sdep(_,_)).

# Do not forget to run "make clean" and "make" after any change to these
# options!

# SIMU_MODE should be set to one of the following:
#
# FAST	 		-	Fast simulation without randomization of event sequence
#         			Suitable for purely behavioral simulation. Not for property
#         			checking by randomization.
#
# RANDOMPRIO	-	Uses random priority to trigger next transition from the
# 					enabled ones. Most effective mode for checking properties
# 					by randomized simulations.
#
# STPN			-	Classical STPN mode useful for more realistic simulations.
# 					But may not be useful for property verification. You need
# 					to specify the probability distribution of transition
# 					delays for various operator types.
#
# RANDOMPICK	-	Picks next transition uniformly randomly from all enabled
# 					ones. Experimental mode - no specific application found.
#
SIMU_MODE	=	RANDOMPRIO

# For performance reason we use C++ STL Bitset, hence we fix the size
# of wide integers. All integer types > 64 bit map to WideUint of this size
WIDEUINTSZ	=	2048

# Data movements between datums are checked for type safety if this is enabled.
# For better performance keep this disabled. For testing after any major
# changes to vC simulator code this should be enabled.
DATUMDBG	=	n

# ----------  LOGGING OPTIONS ----------
#
# By default following logs are always kept enabled and they appear on stdout:
#
#   - Module entry and exit with input and output parameters respectively
#   - Writes to the system pipes
#
# There are separate log files for various aspects. All log files follow a
# terse format, such as : separated values, which makes it easy to analyze logs
# or write tools around them.
#
# If you want a high performance simulation keep all the logging options
# disabled. In favour of performance these options are made compile time
# options so that when they are disabled they don't cause any overhead.
#
# Choose y to enable logging option n to disable

# Pipe logging to file pipes.log: All push and pop operations are logged. Push
# on full and pop from empty are logged identidiably.
# Format:
# 	<push|pushfull|pop|popempty>:<seqno>:<pipename>:<data>
PIPEDBG	=	y

# Operator logging in file ops.log. On update-ack event, the inputs and outputs
# of an operator are logged. For certain operators that do not have update-ack,
# their sample-ack is logged.
# Format: (For Store operator sack is logged, for others uack is logged)
# 	<uack|sack>0:<seqno>:<optype>:<dpename>:<inputs...>:<output>
OPDBG	=	y

# Petri net logging to file petri.log. Every transition, addition and deduction
# of tokens from every place and 'waiting transitions' are logged. For more
# details see README.md of the petrisimu package.
# Format:
#	When a transition triggers
#		t:<nodeid>:<nodelabel>:<seqno>
#	When tokens are added to or deleted from a place
#		p:<nodeid>:<+|->:<tokens added/deleted>:<resultant tokens>:<nodelabel>
#	When a transition attempted to trigger but could not trigger due to deps
#		wait:<nodeid>:<nodelabel>
PNDBG	=	y

# Petri net simulation exits if place capacity is exceded if this is enabled
PN_PLACE_CAPACITY_EXCEPTION	=	n

# Log a unique sequence number for every event.  If set to 'n', 0 will be used
# instead of sequence number. Generating this number involves use of atomic
# increment, cost of which can be saved if this information is not needed.
USESEQNO	=	y

# ----------  EXPORT OPTIONS ----------

# Generate data path dot file for each module, with name <modulename>_CP.dot
GEN_CPDOT	=	n

# Generate data path dot file for each module, with name <modulename>.dot
GEN_DPDOT	=	n

# Generate Petri net dot file as petri.dot
GEN_PETRIDOT	=	y

# Generate pnml representation of the Petri net in petri.pnml
GEN_PETRIPNML	=	n

# ----------  SOME OPTIONAL TOOLS ----------
# cprcheck.out: Currently unused tool. Was developed for dependency
# verification of control path reduction transformation in AHIR.
BUILD_CPR_CHECK	=	n
